{"version":3,"file":"TransparentVideoView.js","sourceRoot":"","sources":["../src/TransparentVideoView.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,aAAa,EAAa,MAAM,OAAO,CAAC;AAE5D,OAAO,0BAA0B,MAAM,8BAA8B,CAAC;AACtE,OAAO,iBAAiB,MAAM,qBAAqB,CAAC;AAGpD;;;;;;;;;;;;;;;;;;;;;;;;;;;GA2BG;AACH,MAAM,OAAO,oBAAqB,SAAQ,aAAwC;IAChF,SAAS,GAAG,SAAS,EAAO,CAAC;IAE7B,OAAO,CAAC,MAAmB;QACzB,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE,CAAC;YAC/B,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,OAAO,CAAC,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC,CAAC;YACjD,OAAO;QACT,CAAC;QACD,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC;IAC1C,CAAC;IAED,MAAM;QACJ,MAAM,EAAE,MAAM,EAAE,GAAG,KAAK,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QACxC,MAAM,QAAQ,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC;QAErC,OAAO,CAAC,0BAA0B,CAAC,IAAI,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,EAAG,CAAC;IAC1F,CAAC;CACF;AAED,gFAAgF;AAChF,gEAAgE;AAChE,yEAAyE;AACzE,SAAS,WAAW,CAAC,MAA4B;IAC/C,IAAI,MAAM,YAAY,iBAAiB,CAAC,WAAW,EAAE,CAAC;QACpD,mBAAmB;QACnB,OAAO,MAAM,CAAC,yBAAyB,CAAC;IAC1C,CAAC;IACD,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE,CAAC;QAC/B,OAAO,MAAM,CAAC;IAChB,CAAC;IACD,OAAO,IAAI,CAAC;AACd,CAAC","sourcesContent":["import { createRef, PureComponent, ReactNode } from 'react';\n\nimport NativeTransparentVideoView from './NativeTransparentVideoView';\nimport NativeVideoModule from './NativeVideoModule';\nimport { TransparentVideoViewProps, VideoPlayer, VideoSource } from './VideoView.types';\n\n/**\n * Displays a video with an alpha channel.\n *\n * The source must be a video compatible with android (https://developer.android.com/media/platform/supported-formats#video-codecs)\n * The source must be a composition of two videos vertically superposed:\n * - The upper part of the video must display the rgb channels\n * - The lower part of the video must display the alpha mask in grayscale\n *   (black -> alpha = 0% opacity, white -> alpha = 100% opacity) to apply to the rgb part.\n *\n *   |-----------------------|\n *   |                       |\n *   |                       |\n *   |       rgb video       |\n *   |                       |\n *   |                       |\n *   |-----------------------|\n *   |                       |\n *   |                       |\n *   |  alpha mask video     |\n *   |                       |\n *   |                       |\n *   |-----------------------|\n *\n *   Warning : This cannot display a video that has an alpha channel like transparent\n *   webm. It only blends rgb data with alpha data.\n *\n * @platform android\n */\nexport class TransparentVideoView extends PureComponent<TransparentVideoViewProps> {\n  nativeRef = createRef<any>();\n\n  replace(source: VideoSource) {\n    if (typeof source === 'string') {\n      this.nativeRef.current?.replace({ uri: source });\n      return;\n    }\n    this.nativeRef.current?.replace(source);\n  }\n\n  render(): ReactNode {\n    const { player, ...props } = this.props;\n    const playerId = getPlayerId(player);\n\n    return <NativeTransparentVideoView {...props} player={playerId} ref={this.nativeRef} />;\n  }\n}\n\n// Temporary solution to pass the shared object ID instead of the player object.\n// We can't really pass it as an object in the old architecture.\n// Technically we can in the new architecture, but it's not possible yet.\nfunction getPlayerId(player: number | VideoPlayer): number | null {\n  if (player instanceof NativeVideoModule.VideoPlayer) {\n    // @ts-expect-error\n    return player.__expo_shared_object_id__;\n  }\n  if (typeof player === 'number') {\n    return player;\n  }\n  return null;\n}\n"]}