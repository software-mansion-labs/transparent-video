{"version":3,"file":"VideoView.types.js","sourceRoot":"","sources":["../src/VideoView.types.ts"],"names":[],"mappings":"","sourcesContent":["import { ViewProps } from 'react-native';\n\n/**\n * A class that represents an instance of the video player.\n */\nexport declare class VideoPlayer {\n  /**\n   * Boolean value whether the player is currently playing.\n   * > This property is get-only, use `play` and `pause` methods to control the playback.\n   */\n  playing: boolean;\n\n  /**\n   * Determines whether the player should automatically replay after reaching the end of the video.\n   * @default false\n   */\n  loop: boolean;\n\n  /**\n   * Boolean value whether the player is currently muted.\n   * @default false\n   */\n  muted: boolean;\n\n  /**\n   * Integer value representing the current position in seconds.\n   */\n  currentTime: number;\n\n  /**\n   * Float value between 0 and 1 representing the current volume.\n   * Muting the player doesn't affect the volume. In other words, when the player is muted, the volume is the same as\n   * when unmuted. Similarly, setting the volume doesn't unmute the player.\n   * @default 1.0\n   */\n  volume: number;\n\n  /**\n   * Boolean value indicating if the player should correct audio pitch when the playback speed changes.\n   * > On web, changing this property is not supported, the player will always correct the pitch.\n   * @default true\n   */\n  preservesPitch: boolean;\n\n  /**\n   * Float value between 0 and 16 indicating the current playback speed of the player.\n   * @default 1.0\n   */\n  playbackRate: number;\n\n  /**\n   * Determines whether the player should continue playing after the app enters the background.\n   * @default false\n   */\n  staysActiveInBackground: boolean;\n\n  /**\n   * Resumes the player.\n   */\n  play(): void;\n\n  /**\n   * Pauses the player.\n   */\n  pause(): void;\n\n  /**\n   * Replaces the current source with a new one.\n   */\n  replace(source: VideoSource): void;\n\n  /**\n   * Seeks the playback by the given number of seconds.\n   */\n  seekBy(seconds: number): void;\n\n  /**\n   * Seeks the playback to the beginning.\n   */\n  replay(): void;\n\n  /**\n   * deallocates the instance of video player.\n   */\n  deallocate(): void;\n}\n\n\ninterface NativeErrorEvent {\n  nativeEvent: {\n    error: string\n  }\n}\n\nexport interface TransparentVideoViewProps extends ViewProps {\n  /**\n   * A player instance â€“ use `useVideoPlayer()` to create one.\n   */\n  player: VideoPlayer;\n\n  videoAspectRatio?: number;\n\n  onEnd: () => void;\n\n  onError: (event: NativeErrorEvent) => void;\n\n  /**\n   * Determines whether the player allows the user to skip media content.\n   * @default false\n   */\n  requiresLinearPlayback?: boolean;\n}\n\n/**\n * Specifies which type of DRM to use. Android supports Widevine, PlayReady and ClearKey, iOS supports FairPlay.\n * */\ntype DRMType = 'clearkey' | 'fairplay' | 'playready' | 'widevine';\n\n/**\n * Specifies DRM options which will be used by the player while loading the video.\n */\ntype DRMOptions = {\n  /**\n   * Determines which type of DRM to use.\n   */\n  type: DRMType;\n\n  /**\n   * Determines the license server URL.\n   */\n  licenseServer: string;\n\n  /**\n   * Determines headers sent to the license server on license requests.\n   */\n  headers?: { [key: string]: string };\n\n  /**\n   * Specifies whether the DRM is a multi-key DRM.\n   */\n  multiKey?: boolean;\n};\n\nexport type VideoSource = string | { uri: string; drm?: DRMOptions } | null;\n"]}